services:
  # Base de donn√©es PostgreSQL
  - type: pserv
    name: linkedboost-database
    plan: free
    databaseName: linkedboost_db
    user: linkedboost_user

  # Backend API Flask
  - type: web
    name: linkedboost-backend
    env: python
    region: frankfurt
    plan: free
    rootDir: backend
    buildCommand: "pip install -r requirements.txt"
    startCommand: "gunicorn app:app --bind 0.0.0.0:$PORT --workers 1 --timeout 120"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: linkedboost-database
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: FLASK_ENV
        value: "production"
      - key: LINKEDIN_CLIENT_ID
        value: "86occjps58doir"
      - key: LINKEDIN_CLIENT_SECRET
        value: "WPL_AP1.C8C6uXjTbpJyQUx2.Y7COPg=="
      - key: GEMINI_API_KEY
        value: "AIzaSyB434P__wR_o_rr5Q3PjOULqyKhMANRtgk"
      - key: NEWS_API_KEY
        value: "2cc0499903c24433a7646123cb3a82e0"
      - key: CORS_ORIGINS
        value: "https://linkedboost-frontend.onrender.com,http://localhost:3000"
    healthCheckPath: "/api/health"

  # Frontend React
  - type: web
    name: linkedboost-frontend
    env: static
    region: frankfurt
    plan: free
    rootDir: frontend
    buildCommand: "npm ci && npm run build"
    staticPublishPath: "./build"
    envVars:
      - key: REACT_APP_API_URL
        fromService:
          type: web
          name: linkedboost-backend
          property: hostport
          envVarKey: REACT_APP_API_URL
      - key: REACT_APP_ENVIRONMENT
        value: "production"
    routes:
      - type: rewrite
        source: "/*"
        destination: "/index.html"