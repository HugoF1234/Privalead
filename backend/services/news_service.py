import requests
import os
from datetime import datetime, timedelta
import logging
import json
from typing import List, Dict, Optional

logger = logging.getLogger(__name__)

class NewsService:
    """Service pour r√©cup√©rer les actualit√©s via NewsAPI"""
    
    def __init__(self):
        self.api_key = os.getenv('NEWS_API_KEY')
        self.base_url = "https://newsapi.org/v2"
        
        if not self.api_key:
            logger.warning("NEWS_API_KEY non configur√©e, mode simulation activ√©")
            self.simulation_mode = True
        else:
            self.simulation_mode = False
            logger.info("‚úÖ NewsAPI configur√©")
    
    def search_news(
        self, 
        keyword: str, 
        language: str = "fr", 
        days: int = 30,
        page_size: int = 20
    ) -> Dict:
        """
        Rechercher des actualit√©s par mot-cl√©
        
        Args:
            keyword: Mot-cl√© de recherche
            language: Langue des articles
            days: Nombre de jours √† couvrir
            page_size: Nombre d'articles √† retourner
            
        Returns:
            Dict contenant les articles et m√©tadonn√©es
        """
        if self.simulation_mode:
            return self._get_simulated_news(keyword, language)
        
        try:
            date_from = (datetime.utcnow() - timedelta(days=days)).strftime('%Y-%m-%d')
            
            params = {
                'q': keyword,
                'from': date_from,
                'sortBy': 'relevancy',
                'language': language,
                'apiKey': self.api_key,
                'pageSize': min(page_size, 100)  # Limite API
            }
            
            logger.info(f"üîç Recherche actualit√©s: {keyword} ({language})")
            
            response = requests.get(
                f"{self.base_url}/everything",
                params=params,
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                articles = self._format_articles(data.get('articles', []))
                
                return {
                    'success': True,
                    'articles': articles,
                    'total_results': data.get('totalResults', 0),
                    'keyword': keyword,
                    'language': language
                }
            else:
                logger.error(f"Erreur NewsAPI: {response.status_code}")
                return self._get_simulated_news(keyword, language)
                
        except Exception as e:
            logger.error(f"Erreur recherche actualit√©s: {e}")
            return self._get_simulated_news(keyword, language)
    
    def get_trending_news(
        self, 
        industry: str = "business", 
        language: str = "fr",
        page_size: int = 15
    ) -> Dict:
        """
        R√©cup√©rer les actualit√©s tendance
        
        Args:
            industry: Secteur d'activit√©
            language: Langue des articles
            page_size: Nombre d'articles
            
        Returns:
            Dict contenant les articles tendance
        """
        if self.simulation_mode:
            return self._get_simulated_trending(industry, language)
        
        try:
            # Mapper les industries vers les cat√©gories NewsAPI
            category_mapping = {
                'tech': 'technology',
                'finance': 'business',
                'health': 'health',
                'marketing': 'business',
                'general': 'business'
            }
            
            category = category_mapping.get(industry, 'business')
            
            params = {
                'category': category,
                'language': language,
                'apiKey': self.api_key,
                'pageSize': min(page_size, 100)
            }
            
            # Pour les pays francophones
            if language == 'fr':
                params['country'] = 'fr'
            
            logger.info(f"üì∞ R√©cup√©ration actualit√©s tendance: {category} ({language})")
            
            response = requests.get(
                f"{self.base_url}/top-headlines",
                params=params,
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                articles = self._format_articles(data.get('articles', []))
                
                return {
                    'success': True,
                    'articles': articles,
                    'total_results': data.get('totalResults', 0),
                    'category': category,
                    'language': language
                }
            else:
                logger.error(f"Erreur NewsAPI trending: {response.status_code}")
                return self._get_simulated_trending(industry, language)
                
        except Exception as e:
            logger.error(f"Erreur actualit√©s tendance: {e}")
            return self._get_simulated_trending(industry, language)
    
    def get_industry_news(
        self, 
        industry: str, 
        language: str = "fr",
        days: int = 7
    ) -> Dict:
        """
        R√©cup√©rer les actualit√©s sp√©cifiques √† un secteur
        
        Args:
            industry: Secteur d'activit√©
            language: Langue des articles  
            days: Nombre de jours √† couvrir
            
        Returns:
            Dict contenant les articles du secteur
        """
        # Mapping des secteurs vers des mots-cl√©s de recherche
        industry_keywords = {
            'tech': 'technologie OR informatique OR num√©rique OR startup OR IA',
            'marketing': 'marketing OR publicit√© OR communication OR digital',
            'finance': 'finance OR √©conomie OR banque OR investissement OR fintech',
            'health': 'sant√© OR m√©decine OR bien-√™tre OR pharmaceutique OR biotechnologie',
            'education': '√©ducation OR formation OR enseignement OR universit√© OR edtech',
            'rh': 'ressources humaines OR emploi OR recrutement OR travail OR RH',
            'consulting': 'conseil OR consulting OR strat√©gie OR management OR transformation',
            'retail': 'commerce OR distribution OR vente OR e-commerce OR retail'
        }
        
        keywords = industry_keywords.get(industry, industry)
        
        return self.search_news(
            keyword=keywords,
            language=language,
            days=days,
            page_size=15
        )
    
    def _format_articles(self, articles: List[Dict]) -> List[Dict]:
        """Formater les articles pour l'interface"""
        formatted_articles = []
        
        for article in articles:
            if not article.get('title') or not article.get('description'):
                continue
            
            # Nettoyer et formater
            formatted_article = {
                'title': self._clean_text(article.get('title', '')),
                'description': self._clean_text(article.get('description', '')),
                'url': article.get('url', ''),
                'source': {
                    'name': article.get('source', {}).get('name', 'Source inconnue')
                },
                'publishedAt': article.get('publishedAt', ''),
                'urlToImage': article.get('urlToImage'),
                'content': self._clean_text(article.get('content', '')[:200]) if article.get('content') else '',
                'formatted_date': self._format_date(article.get('publishedAt'))
            }
            
            formatted_articles.append(formatted_article)
        
        return formatted_articles
    
    def _clean_text(self, text: str) -> str:
        """Nettoyer le texte des articles"""
        if not text:
            return ""
        
        # Supprimer les balises HTML basiques
        import re
        text = re.sub(r'<[^>]+>', '', text)
        
        # D√©coder les entit√©s HTML
        import html
        text = html.unescape(text)
        
        # Nettoyer les espaces multiples
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    
    def _format_date(self, date_string: str) -> str:
        """Formater la date pour l'affichage"""
        if not date_string:
            return 'Date inconnue'
        
        try:
            date_obj = datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%SZ')
            return date_obj.strftime('%d/%m/%Y')
        except:
            return 'Date inconnue'
    
    def _get_simulated_news(self, keyword: str, language: str) -> Dict:
        """G√©n√©rer des actualit√©s simul√©es pour la d√©mo"""
        logger.info(f"üì∞ G√©n√©ration actualit√©s simul√©es: {keyword}")
        
        simulated_articles = [
            {
                'title': f'L\'impact de {keyword} sur l\'√©conomie num√©rique en 2025',
                'description': f'Une analyse approfondie des transformations li√©es √† {keyword} et leurs implications pour les entreprises fran√ßaises.',
                'url': 'https://example.com/article1',
                'source': {'name': 'Tech & Innovation'},
                'publishedAt': (datetime.utcnow() - timedelta(hours=2)).isoformat() + 'Z',
                'urlToImage': 'https://via.placeholder.com/400x200?text=Article+Image',
                'content': f'Les experts s\'accordent sur l\'importance croissante de {keyword} dans le paysage technologique...',
                'formatted_date': datetime.now().strftime('%d/%m/%Y')
            },
            {
                'title': f'Comment {keyword} r√©volutionne les pratiques professionnelles',
                'description': f'T√©moignages et retours d\'exp√©rience sur l\'adoption de {keyword} dans diff√©rents secteurs d\'activit√©.',
                'url': 'https://example.com/article2',
                'source': {'name': 'Business Magazine'},
                'publishedAt': (datetime.utcnow() - timedelta(hours=6)).isoformat() + 'Z',
                'urlToImage': 'https://via.placeholder.com/400x200?text=Business+News',
                'content': f'De nombreuses entreprises t√©moignent des b√©n√©fices de {keyword} sur leur productivit√©...',
                'formatted_date': datetime.now().strftime('%d/%m/%Y')
            },
            {
                'title': f'Les enjeux de {keyword} pour les startups fran√ßaises',
                'description': f'Opportunit√©s et d√©fis que repr√©sente {keyword} pour l\'√©cosyst√®me startup fran√ßais.',
                'url': 'https://example.com/article3',
                'source': {'name': 'Startup News'},
                'publishedAt': (datetime.utcnow() - timedelta(hours=12)).isoformat() + 'Z',
                'urlToImage': 'https://via.placeholder.com/400x200?text=Startup+Focus',
                'content': f'L\'√©cosyst√®me startup fran√ßais s\'empare de {keyword} pour innover...',
                'formatted_date': (datetime.now() - timedelta(days=1)).strftime('%d/%m/%Y')
            }
        ]
        
        return {
            'success': True,
            'articles': simulated_articles,
            'total_results': len(simulated_articles),
            'keyword': keyword,
            'language': language,
            'simulated': True
        }
    
    def _get_simulated_trending(self, industry: str, language: str) -> Dict:
        """G√©n√©rer des actualit√©s tendance simul√©es"""
        logger.info(f"üìà G√©n√©ration trending simul√©: {industry}")
        
        industry_topics = {
            'tech': [
                'Intelligence Artificielle et productivit√©',
                'Cybers√©curit√© : nouvelles menaces 2025',
                'Cloud computing : migration des entreprises'
            ],
            'marketing': [
                'Marketing d\'influence : nouvelles tendances',
                'Personnalisation client avec l\'IA',
                'ROI publicit√© digitale en 2025'
            ],
            'finance': [
                'Fintech : r√©volution des paiements',
                'Cryptomonnaies et r√©gulation europ√©enne',
                'Investissement ESG en forte croissance'
            ],
            'general': [
                'Transformation digitale des PME',
                'T√©l√©travail : nouveaux enjeux RH',
                'Innovation durable en entreprise'
            ]
        }
        
        topics = industry_topics.get(industry, industry_topics['general'])
        
        trending_articles = []
        for i, topic in enumerate(topics):
            article = {
                'title': topic,
                'description': f'Analyse approfondie des enjeux li√©s √† {topic.lower()} et impact sur les entreprises.',
                'url': f'https://example.com/trending-{i+1}',
                'source': {'name': f'{industry.capitalize()} Today'},
                'publishedAt': (datetime.utcnow() - timedelta(hours=i*2)).isoformat() + 'Z',
                'urlToImage': f'https://via.placeholder.com/400x200?text={topic.replace(" ", "+")}',
                'content': f'Les derni√®res √©volutions concernant {topic.lower()} montrent...',
                'formatted_date': datetime.now().strftime('%d/%m/%Y')
            }
            trending_articles.append(article)
        
        return {
            'success': True,
            'articles': trending_articles,
            'total_results': len(trending_articles),
            'category': industry,
            'language': language,
            'simulated': True
        }
    
    def get_article_summary(self, article_url: str) -> Dict:
        """
        R√©cup√©rer un r√©sum√© d'article (simulation)
        Dans une vraie impl√©mentation, cela pourrait utiliser une API de scraping
        """
        return {
            'success': True,
            'summary': 'R√©sum√© automatique de l\'article (fonctionnalit√© √† d√©velopper)',
            'key_points': [
                'Point cl√© 1 de l\'article',
                'Point cl√© 2 de l\'article', 
                'Point cl√© 3 de l\'article'
            ],
            'sentiment': 'neutral',
            'simulated': True
        }
    
    def is_available(self) -> bool:
        """V√©rifier si le service NewsAPI est disponible"""
        return not self.simulation_mode
    
    def get_status(self) -> Dict:
        """Obtenir le statut du service"""
        return {
            'service': 'NewsAPI',
            'available': self.is_available(),
            'simulation_mode': self.simulation_mode,
            'api_key_configured': bool(self.api_key)
        }
